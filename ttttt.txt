#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <string>
using namespace std;


void minVec(vector<int>& vec) {
    while (vec[0] > vec[1] || vec[0] > vec[2]) {
        swap(vec[0], vec[1]);
        swap(vec[1], vec[2]);
    }
}



int main() {
    int n = 0;
    int m = 0;
    vector<vector<int>> input;
    cin >> n >> m;
    for (int i = 0; i < m ; ++i) {
        vector<int> temp;
        for (int j = 0; j < 3; ++j) {
            int tempN = 0;
            cin >> tempN;
            temp.push_back(tempN);
        }
        input.push_back(temp);
    }
    vector<vector<int>*> bfs;
    bfs.push_back(&input[0]);
    map<string, int> dic;
    while (!bfs.empty()) {
        auto beg = *bfs.begin();
        minVec(*beg);
        for (int j = 0; j < 3; ++j) {
            int a = (*beg)[j];
            int b = (*beg)[(j+1)%3];
            int c = (*beg)[(j+2)%3];
            string s = to_string(a) + to_string(b);
            if (dic.find(s) != dic.end()) {
                continue;
            }
            for (auto& i : input) {
                if (a == i[0] || a == i[1] || a == i[2]) {
                    int aIndex = 0;
                    if (a == i[0]) aIndex = 0;
                    if (a == i[1]) aIndex = 1;
                    if (a == i[2]) aIndex = 2;

                    if (b == i[0] || b == i[1] || b == i[2]) {
                        int bIndex = 0;
                        if (b == i[0]) bIndex = 0;
                        if (b == i[1]) bIndex = 1;
                        if (b == i[2]) bIndex = 2;

                        if (c != i[0] && c != i[1] && c != i[2]) {
                            string ss = to_string(a) + to_string(b);
                            dic.insert(pair<string,int>(ss,1));
                            if ((aIndex < bIndex) && (j < (j + 1) % 3)
                                || (aIndex > bIndex) && (j > (j + 1) % 3)) {
                                swap(i[aIndex], i[bIndex]);
                            }
                            bfs.push_back(&i);
                        }
                    }
                }
            }
        }
        bfs.erase(bfs.begin());
    }

    for (auto& i : input) {
        cout << i[0] << " " << i[1] << " " << i[2] << endl;
    }

    

    return 0;
}