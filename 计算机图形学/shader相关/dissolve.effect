// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        u_dissolveMap: {value: white, editor: { tooltip: 'dissolve map'} }
        dissolveValue: {value: 0.5, editor: { range: [0,1,0.01], slide: true } }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform sampler2D u_dissolveMap;
  #endif

  uniform Dissolve {
    float dissolveValue ;
  } ;

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    float value = 1.0;
    #if USE_TEXTURE
        //vec4 dissolveMap = texture(dissolve, uv0);
        vec4 dissolveMap = texture(u_dissolveMap, v_uv0);
        value *= dissolveMap.b;
        CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
    if(value < dissolveValue ){
      discard;
    }
  


    ALPHA_TEST(o);
    if(value < dissolveValue + 0.08){
      o = vec4(0.9,0.6,0.3,o.a);
    }

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
